package com.example.MCP_Server.tools;

import com.example.MCP_Server.service.FaceItService;
import com.example.MCP_Server.service.StatsCalculator;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.ai.tool.annotation.Tool;
import org.springframework.ai.tool.annotation.ToolParam;
import org.springframework.stereotype.Component;

import java.util.Map;

@Slf4j
@Component
@RequiredArgsConstructor
public class GameAnalysisTools {

    private final FaceItService faceItService;
    private final StatsCalculator statsCalculator;

    @Tool(
            name = "getPlayerStats",
            description = "–ü–æ–ª—É—á–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞ FaceIT CS2"
    )
    public String getPlayerStats(
            @ToolParam(description = "–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ FaceIT") String nickname
    ) {
        try {
            log.info("Analyzing player: {}", nickname);
            Map<String, Object> analysis = faceItService.getPlayerAnalysis(nickname);
            return statsCalculator.generateAnalysisReport(analysis);
        } catch (Exception e) {
            log.error("Error in getPlayerStats: {}", e.getMessage());
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–≥—Ä–æ–∫–∞ " + nickname + ": " + e.getMessage();
        }
    }

    @Tool(
            name = "getPlayerOverview",
            description = "–ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –∏–≥—Ä–æ–∫–∞: ELO, —É—Ä–æ–≤–µ–Ω—å, —Å—Ç—Ä–∞–Ω–∞"
    )
    public String getPlayerOverview(
            @ToolParam(description = "–ù–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞") String nickname
    ) {
        try {
            var player = faceItService.getPlayerStats(nickname);
            if (player == null) {
                return "‚ùå –ò–≥—Ä–æ–∫ " + nickname + " –Ω–µ –Ω–∞–π–¥–µ–Ω";
            }

            return String.format("""
                üë§ **–û–±–∑–æ—Ä –∏–≥—Ä–æ–∫–∞:** %s
                
                üìä –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
                ‚Ä¢ ELO: %d
                ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: %d
                ‚Ä¢ –°—Ç—Ä–∞–Ω–∞: %s
                """,
                    player.getNickname(),
                    player.getGames().getCs2().getFaceitElo(),
                    player.getGames().getCs2().getSkillLevel(),
                    player.getCountry()
            );
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞: " + e.getMessage();
        }
    }

    @Tool(
            name = "comparePlayers",
            description = "–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ FaceIT"
    )
    public String comparePlayers(
            @ToolParam(description = "–ü–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫") String player1,
            @ToolParam(description = "–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫") String player2
    ) {
        try {
            Map<String, Object> analysis1 = faceItService.getPlayerAnalysis(player1);
            Map<String, Object> analysis2 = faceItService.getPlayerAnalysis(player2);

            StringBuilder comparison = new StringBuilder();
            comparison.append("ü§º **–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤:**\n\n");
            comparison.append("**").append(player1).append(" vs ").append(player2).append("**\n\n");

            if (analysis1.containsKey("player") && analysis2.containsKey("player")) {
                var p1 = (com.example.MCP_Server.model.PlayerStats) analysis1.get("player");
                var p2 = (com.example.MCP_Server.model.PlayerStats) analysis2.get("player");

                comparison.append("üèÜ **ELO —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:**\n");
                comparison.append("‚Ä¢ ").append(p1.getNickname()).append(": ").append(p1.getGames().getCs2().getFaceitElo()).append("\n");
                comparison.append("‚Ä¢ ").append(p2.getNickname()).append(": ").append(p2.getGames().getCs2().getFaceitElo()).append("\n");

                comparison.append("\nüéØ **–£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞:**\n");
                comparison.append("‚Ä¢ ").append(p1.getNickname()).append(": ").append(p1.getGames().getCs2().getSkillLevel()).append("\n");
                comparison.append("‚Ä¢ ").append(p2.getNickname()).append(": ").append(p2.getGames().getCs2().getSkillLevel()).append("\n");
            }

            return comparison.toString();
        } catch (Exception e) {
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤: " + e.getMessage();
        }
    }
}