package com.example.MCP_Server.service;

import com.example.MCP_Server.model.PlayerStats;
import org.springframework.stereotype.Service;

import java.util.Map;

@Service
public class StatsCalculator {

    public String generateAnalysisReport(Map<String, Object> analysis) {
        if (analysis.containsKey("error")) {
            return "‚ùå –û—à–∏–±–∫–∞: " + analysis.get("error");
        }

        PlayerStats player = (PlayerStats) analysis.get("player");
        StringBuilder report = new StringBuilder();

        report.append("üéÆ **–ê–Ω–∞–ª–∏–∑ –∏–≥—Ä–æ–∫–∞: ").append(player.getNickname()).append("**\n\n");

        // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        report.append("üìä **–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n");
        report.append("‚Ä¢ ELO: ").append(player.getGames().getCs2().getFaceitElo()).append("\n");
        report.append("‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞: ").append(player.getGames().getCs2().getSkillLevel()).append("\n");
        report.append("‚Ä¢ –°—Ç—Ä–∞–Ω–∞: ").append(player.getCountry()).append("\n");

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–µ–π
        if (analysis.containsKey("matchesAnalyzed")) {
            int matchesAnalyzed = (int) analysis.get("matchesAnalyzed");
            report.append("\nüìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö ").append(matchesAnalyzed).append(" –º–∞—Ç—á–µ–π:**\n");
            report.append("‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —É–±–∏–π—Å—Ç–≤–∞: ").append(analysis.get("avgKills")).append("\n");
            report.append("‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Å–º–µ—Ä—Ç–∏: ").append(analysis.get("avgDeaths")).append("\n");
            report.append("‚Ä¢ K/D Ratio: ").append(analysis.get("kdRatio")).append("\n");
            report.append("‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Ö–µ–¥—à–æ—Ç–æ–≤: ").append(analysis.get("headshotRate")).append("%\n");

            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            report.append("\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n");
            double kdRatio = (double) analysis.get("kdRatio");
            double headshotRate = (double) analysis.get("headshotRate");

            if (kdRatio < 1.0) {
                report.append("‚Ä¢ –ù—É–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n");
            }
            if (headshotRate < 40) {
                report.append("‚Ä¢ –¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–∏—Ü–µ–ª –≤ –≥–æ–ª–æ–≤—É –Ω–∞ aim maps\n");
            }
            if (kdRatio > 1.2 && headshotRate > 45) {
                report.append("‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ\n");
            }
        } else {
            report.append("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç—á–∏\n");
        }

        return report.toString();
    }
}